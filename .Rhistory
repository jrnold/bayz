check()
library(purrr)
check()
readLines("/private/var/folders/g7/d2mfjm5n4c39nyb58lxn9p5c0000gn/T/RtmpO3npxB/bayz.Rcheck/00install.out")
check()
devtools::use_testthat()
install("bayz")
install()
parse_parnames("beta.1.1", "beta.1.2")
parse_parnames(c("beta.1.1", "beta.1.2"))
parse_parnames(c("alpha", "beta.1", "beta.1", "gamma.1.1", "gamma.1.2"))
dput(parse_parnames(c("alpha", "beta.1", "beta.1", "gamma.1.1", "gamma.1.2")))
install()
x <- c("alpha", "beta.1", "beta.1", "gamma.1.1", "gamma.1.2"))
parsed <- parse_parnames(c("alpha", "beta.1", "beta.1",
"gamma.1.1", "gamma.1.2"))
install()
x <- c("alpha", "beta.1", "beta.1", "gamma.1.1", "gamma.1.2"))
parsed <- parse_parnames(c("alpha", "beta.1", "beta.1",
"gamma.1.1", "gamma.1.2"))
parsed
parsed %>% dput()
x <- c("alpha", "beta.1", "beta.2", "gamma.1.1", "gamma.1.2"))
parsed <- parse_parnames(c("alpha", "beta.1", "beta.1",
"gamma.1.1", "gamma.1.2"))
expected <- tribble(
parameter = x,
name = c("alpha", "beta", "beta", "gamma", "gamma"),
idx = list(NA_integer_, 1L, 2L, c(1L, 1L), c(1L, 2L))
)
x <- c("alpha", "beta.1", "beta.2", "gamma.1.1", "gamma.1.2"))
parsed <- parse_parnames(c("alpha", "beta.1", "beta.1",
"gamma.1.1", "gamma.1.2"))
expected <- tibble::tibble(
parameter = x,
name = c("alpha", "beta", "beta", "gamma", "gamma"),
idx = list(NA_integer_, 1L, 2L, c(1L, 1L), c(1L, 2L))
)
x <- c("alpha", "beta.1", "beta.2", "gamma.1.1", "gamma.1.2")
parsed <- parse_parnames(c("alpha", "beta.1", "beta.1",
"gamma.1.1", "gamma.1.2"))
expected <- tibble::tibble(
parameter = x,
name = c("alpha", "beta", "beta", "gamma", "gamma"),
idx = list(NA_integer_, 1L, 2L, c(1L, 1L), c(1L, 2L))
)
parsed
expected
x <- c("alpha", "beta.1", "beta.2", "gamma.1.1", "gamma.1.2")
parsed <- parse_parnames(c("alpha", "beta.1", "beta.1",
"gamma.1.1", "gamma.1.2"))
expected <- tibble::tibble(
parameter = x,
name = c("alpha", "beta", "beta", "gamma", "gamma"),
idx = list(NA_integer_, 1L, 2L, c(1L, 1L), c(1L, 2L))
)
expect_equal(parsed, expected)
check()
x <- c("alpha", "beta[1]", "beta[2]", "gamma[1,1]", "gamma[1,2]")
parsed <- parse_parnames(x)
expected <- tibble::tibble(
par = x,
name = c("alpha", "beta", "beta", "gamma", "gamma"),
dim = list(NA_integer_, 1L, 2L, c(1L, 1L), c(1L, 2L))
)
expect_equal(parsed, expected)
x <- c("alpha", "beta[1]", "beta[2]", "gamma[1,1]", "gamma[1,2]")
parsed <- parse_parnames(x)
expected <- tibble::tibble(
par = x,
name = c("alpha", "beta", "beta", "gamma", "gamma"),
dim = list(NA_integer_, 1L, 2L, c(1L, 1L), c(1L, 2L))
)
parsed
expect_equal(parsed$par, expected$par)
expect_equal(parsed$idx, expected$idx)
expect_equal(parsed$dim, expected$dim)
expect_equal(parsed$name, expected$name)
source('~/Documents/projects/bayz/tests/testthat/test_parparser.R', echo=TRUE)
x <- c("alpha", "beta[1]", "beta[2]", "gamma[1,1]", "gamma[1,2]")
parsed <- parse_stan_parnames(x)
expected <- tibble::tibble(
par = x,
name = c("alpha", "beta", "beta", "gamma", "gamma"),
dim = list(NA_integer_, 1L, 2L, c(1L, 1L), c(1L, 2L))
)
expect_is(parsed, "data.frame")
expect_equal(parsed$par, expected$par)
expect_equal(parsed$name, expected$name)
expect_equal(parsed$dim, expected$dim)
source('~/Documents/projects/bayz/tests/testthat/test_parparser.R', echo=TRUE)
x <- c("alpha", "beta_1", "beta_2", "gamma_1,1", "gamma_1,2")
parsed <- parse_parnames(x, post = "", pre="_", sep = ",")
expected <- tibble::tibble(
par = x,
name = c("alpha", "beta", "beta", "gamma", "gamma"),
dim = list(NA_integer_, 1L, 2L, c(1L, 1L), c(1L, 2L))
)
expect_is(parsed, "data.frame")
expect_equal(parsed$par, expected$par)
expect_equal(parsed$name, expected$name)
expect_equal(parsed$dim, expected$dim)
x <- c("alpha", "beta_1", "beta_2", "gamma2_1,1", "gamma2_1,2")
parsed <- parse_parnames(x, post = "", pre="_", sep = ",")
expected <- tibble::tibble(
par = x,
name = c("alpha", "beta", "beta", "gamma2", "gamma2"),
dim = list(NA_integer_, 1L, 2L, c(1L, 1L), c(1L, 2L))
)
expect_is(parsed, "data.frame")
expect_equal(parsed$par, expected$par)
expect_equal(parsed$name, expected$name)
expect_equal(parsed$dim, expected$dim)
install()
create_parnames("alpha", NA)
create_parnames("alpha", 1)
create_parnames("alpha", 2)
expect_equal(create_parnames("alpha", NA), "alpha")
expect_equal(create_parnames("alpha", NULL), "alpha")
expect_equal(create_parnames("alpha", integer), "alpha")
expect_equal(create_parnames("alpha", NA), "alpha")
expect_equal(create_parnames("alpha", NULL), "alpha")
expect_equal(create_parnames("alpha", integer()), "alpha")
create_parnames("alpha", c(1, 2, 3))
dput(create_parnames("alpha", c(1, 2, 3)))
expect_equal(create_parnames("alpha", NA), "alpha")
expect_equal(create_parnames("alpha", NULL), "alpha")
expect_equal(create_parnames("alpha", integer()), "alpha")
expect_equal(create_parnames("alpha", 1), "alpha[1]")
expect_equal(create_parnames("alpha", 2), c("alpha[1]", "alpha[2]"))
expect_equal(create_parnames("alpha", c(1, 2)),
c("alpha[1,1,1]", "alpha[1,2,2]",
"alpha[1,1,2]", "alpha[1,2,2]",
"alpha[1,1,3]", "alpha[1,2,3]")))
expect_equal(create_parnames("alpha", c(1, 2), pre = "_",
sep = ".", post = ""),
c("alpha_1.1.1", "alpha_1.2.1",
"alpha_1.1.2", "alpha_1.2.2",
"alpha_1.1.3", "alpha_1.2.3"))
expect_equal(create_parnames("alpha", c(1, 2, 3)),
c("alpha[1,1,1]", "alpha[1,2,2]",
"alpha[1,1,2]", "alpha[1,2,2]",
"alpha[1,1,3]", "alpha[1,2,3]")))
expect_equal(create_parnames("alpha", c(1, 2, 3), pre = "_",
sep = ".", post = ""),
c("alpha_1.1.1", "alpha_1.2.1",
"alpha_1.1.2", "alpha_1.2.2",
"alpha_1.1.3", "alpha_1.2.3"))
create_parnames("alpha", 1.2)
source('~/Documents/projects/bayz/R/parparser.R', echo=TRUE)
check()
expect_equal(create_parnames("alpha", NA), "alpha")
expect_equal(create_parnames("alpha", NULL), "alpha")
expect_equal(create_parnames("alpha", integer()), "alpha")
expect_equal(create_parnames("alpha", 1), "alpha[1]")
expect_equal(create_parnames("alpha", 2), c("alpha[1]", "alpha[2]"))
expect_equal(create_parnames("alpha", c(1, 2, 3)),
c("alpha[1,1,1]", "alpha[1,2,2]",
"alpha[1,1,2]", "alpha[1,2,2]",
"alpha[1,1,3]", "alpha[1,2,3]"))
create_parnames("alpha", c(1, 2, 3))
create_parnames("alpha", c(1, 2, 3)) %>% dput()
expect_equal(create_parnames("alpha", c(1, 2, 3), colmajor=FALSE),
c("alpha[1,1,1]", "alpha[1,2,1]", "alpha[1,1,2]", "alpha[1,2,2]",
"alpha[1,1,3]", "alpha[1,2,3]"))
create_parnames("alpha", c(1, 2, 3), colmajor=FALSE) %>% dput()
check()
source('~/Documents/projects/bayz/tests/testthat/test_parparser.R', echo=TRUE)
check()
expand_grid_dim(1)
expand_grid_dim(2)
expand_grid_dim(3)
expand_grid_dim(c(1, 2, 3))
expand_grid_dim(c(1, 2, 3), colmajor = FALSE)
expand_grid_dim(c(2, 3, 4), colmajor = FALSE)
expand_grid_dim(c(2, 3, 4), colmajor = FALSE) %>% print(nrow())
expand_grid_dim(c(3, 3, 3), colmajor = FALSE) %>% print(nrow())
expand_grid_dim(c(3, 3, 3), colmajor = FALSE) %>% print(n = 100)
expand_grid_dim(c(3, 3, 3), colmajor = TRUE) %>% print(n = 100)
expand_grid_dim(c(2, 2, 2), colmajor = TRUE) %>% print(n = 100)
expand_grid_dim(c(2, 2, 2), colmajor = TRUE)
expand_grid_dim(c(2, 2, 2), colmajor = TRUE) %>% dput()
out <- expand_grid_dim(c(2, 2, 2), colmajor = FALSE)
expected <- tibble(dim_1 = c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L),
dim_2 = c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L),
dim_3 = c(1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L))
expect_equal(out, expected)
source('~/Documents/projects/bayz/tests/testthat/text_expand_grid_dim.R', echo=TRUE)
check()
install()
check()
as_data_frame
dplyr::as_data_frame
source('~/Documents/projects/bayz/R/stanfit-summary.R', echo=TRUE)
check()
?print.tibble
library(dplyr)
?print.tibble
?tibble
source('~/Documents/projects/bayz/R/stanfit-summary.R', echo=TRUE)
?trunc_mat
check()
?as_data_frame
